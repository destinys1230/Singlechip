ORG 0000H
	LJMP MAIN
ORG 0040H

MAIN:	//初始化
	Y_DAT EQU P0.0	//行方向位数据
	Y_SRCK EQU P0.1	//行方向移位时钟
	Y_RCK EQU P0.2	//行方向数据时钟
	Y_EN EQU P0.7	//行方向使能端
	
	X_DAT EQU P0.3	//同上，列方向
	X_SRCK EQU P0.5
	X_RCK EQU P0.6
	X_EN EQU P0.4

	COL_COUNT EQU 30H	//列偏移量，基址为COL_TAB
	M_DPH EQU 31H	//16位显示指针
	M_DPL EQU 32H
	B_DPH EQU 33H	//16位基址指针，由MOVESTEP修改，进行屏幕移步
	B_DPL EQU 34H

	MOV DPTR,#BOUND	//设置DPTR为BOUND地址值（不是表中的00H，而是地址值，BOUND在表中的位置在FONT之后，地址值可以用作边界值）
	MOV R6,DPH	//R6,R7用于保存边界值
	MOV R7,DPL
	MOV DPTR,#FONT	//获取字符串首址
	MOV M_DPH,DPH	//保存显示指针（地址）
	MOV M_DPL,DPL
	MOV B_DPH,DPH	//保存基址指针（地址）
	MOV B_DPL,DPL
M_SHOW:
	MOV COL_COUNT,#00H	//列偏移量清零
	ACALL CLEAR	//清屏
	ACALL DELAY	//延时
	MOV R4,#30	//一屏扫30次
MUL_SCAN:
	MOV R5,#16	//16列为一屏
ONE_SCR:
	ACALL LED_COL	//选择一列，列信号设置为0，其他为1。先选择一列（行），设置为0，再给此列（行）赋值。行、列是一个道理
	ACALL LED_ROW	//选择一列点亮
	ACALL DELAY	//延时
	DJNZ R5,ONE_SCR	//一屏未扫描完则继续
	MOV A,B_DPL	//重置显示指针
	MOV M_DPL,A
	MOV A,B_DPH
	MOV M_DPH,A
	MOV COL_COUNT,#00H	//重置偏移量
	DJNZ R4,MUL_SCAN	//重画
	
	ACALL MOVESTEP	//一屏显示并重画完则移步
	AJMP M_SHOW	//显示下一屏
	;main函数

LED_COL:
	MOV DPTR,#COL_TAB	//设置DPTR为列选择表首址
	MOV R3,#02H	//每次存8位，共存16位，即2次
	MOV R0,COL_COUNT	//获取列偏移量
COL_SW:
	MOV A,R0
	MOVC A,@A+DPTR	//获得列地址
	CPL A	//取反，0择选择
	MOV R2,#08H	//每次存8位
COL1:
	RLC A
	CLR X_SRCK
	MOV X_DAT,C
	SETB X_SRCK
	DJNZ R2,COL1
COL_CIR:
	INC R0
	DJNZ R3,COL_SW
	CLR X_RCK
	SETB X_RCK
	CLR X_EN
	MOV COL_COUNT,R0
	RET
	;行选择函数

LED_ROW:
	MOV R3,#02H
	MOV DPH,M_DPH
	MOV DPL,M_DPL
ROW_SW:
	CLR A
	MOVC A,@A+DPTR
	MOV R2,#08H
ROW1:
	RLC A
	CLR Y_SRCK
	MOV Y_DAT,C
	SETB Y_SRCK
	DJNZ R2,ROW1
ROW_CIR:
	INC DPTR
	DJNZ R3,ROW_SW
	CLR Y_RCK
	SETB Y_RCK
	CLR Y_EN
	
	MOV A,R6
	CJNE A,DPH,LESS
H_EQU:
	MOV A,R7
	CJNE A,DPL,LESS
L_EQU:
	MOV DPTR,#FONT
LESS:
	MOV M_DPL,DPL
	MOV M_DPH,DPH
	RET
	;显示列函数

MOVESTEP:
	MOV DPH,B_DPH
	MOV DPL,B_DPL
	INC DPTR
	INC DPTR
	MOV A,R6
	CJNE A,DPH,NEQU
H_EQU_2:
	MOV A,R7
	CJNE A,DPL,NEQU
L_EQU_2:
	MOV DPTR,#FONT
NEQU:
	MOV B_DPL,DPL
	MOV B_DPH,DPH
	MOV M_DPL,DPL
	MOV M_DPH,DPH
	RET
	;移步函数

CLEAR:
	MOV R2,#16
CLE:
	CLR X_SRCK
	CLR X_DAT
	SETB X_SRCK
	DJNZ R2,CLE
OUT:
	CLR X_RCK
	SETB X_RCK
	CLR X_EN
	RET
	;清屏函数

DELAY:
	MOV R1,#015H
DEL1:
	MOV R2,#0AFH
DEL2:
	DJNZ R2,DEL2
	DJNZ R1,DEL1
	RET
	;延时函数

FONT:
;吉 CBCAA

DB 010H,000H,010H,000H,011H,000H,011H,03FH
DB 011H,022H,011H,022H,011H,022H,0FFH,022H
DB 011H,022H,011H,022H,011H,022H,011H,03FH
DB 011H,000H,010H,000H,010H,000H,000H,000H

;林 CC1D6

DB 008H,020H,008H,0C0H,00BH,000H,0FFH,0FFH
DB 009H,000H,008H,088H,000H,010H,008H,020H
DB 008H,0C0H,00BH,000H,0FFH,0FFH,00BH,000H
DB 008H,0C0H,008H,020H,008H,010H,000H,000H

;大 CB4F3

DB 004H,001H,004H,001H,004H,002H,004H,004H
DB 004H,008H,004H,030H,004H,0C0H,0FFH,000H
DB 004H,0C0H,004H,030H,004H,008H,004H,004H
DB 004H,002H,004H,001H,004H,001H,000H,000H

;学 CD1A7

DB 002H,020H,00CH,020H,088H,020H,069H,020H
DB 009H,020H,009H,022H,089H,021H,069H,07EH
DB 009H,060H,009H,0A0H,019H,020H,028H,020H
DB 0C8H,020H,00AH,020H,00CH,020H,000H,000H
BOUND: DB 00H

COL_TAB:
DB 080H,000H,040H,000H,020H,000H,010H,000H,008H,000H,004H,000H,002H,000H,001H,000H
DB 000H,080H,000H,040H,000H,020H,000H,010H,000H,008H,000H,004H,000H,002H,000H,001H
DB 000H,001H,000H,002H,000H,004H,000H,008H,000H,010H,000H,020H,000H,040H,000H,080H
DB 001H,000H,002H,000H,004H,000H,008H,000H,010H,000H,020H,000H,040H,000H,080H,000H

END