#include <reg52.h>
#include <stdio.h>
#include <intrins.h>

#define TIMER 10
#define MAXSPEED 180
#define MIDSPEED 120
#define MINSPEED 60
//LCD
sbit CS1=P1^7;
sbit CS2=P1^6;
sbit RST=P1^5;
sbit E=P3^3;
sbit RW=P3^4;
sbit RS=P3^5;
sbit BUSY=P2^7;


sbit RESET=P2^4;
sbit KEY1=P3^6;
sbit KEY2=P3^7;
sbit OUT=P1^1;

//led
sfr P4=0xc0;
sfr P4SW=0xbb;
sbit DCLK=P4^4;
sbit LED=P4^5;


int i,j,k,a,b,c,d,temp;
int timer=TIMER,count=0,countS=0,currentSpeed=0,objSpeed=0;
int SUM=0,N=30,M=256;

char code ledCode[10]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};


char code dimubiao[4][16]={{0x00,0x80,0x60,0xF8,0x07,0x00,0xFC,0x84,0x84,0x84,0xFE,0x82,0x83,0x82,0x80,0x00},
                    {0x01,0x00,0x00,0xFF,0x00,0x00,0xFF,0x40,0x20,0x00,0x41,0x8E,0x30,0x40,0xF8,0x00}
};
char code gaomubiao[4][16]={{0x04,0x04,0x04,0x04,0xF4,0x94,0x95,0x96,0x94,0x94,0xF4,0x04,0x04,0x04,0x04,0x00},
                    {0x00,0xFE,0x02,0x02,0x7A,0x4A,0x4A,0x4A,0x4A,0x4A,0x7A,0x02,0x82,0xFE,0x00,0x00},/*"高",0*/
};
char code dangqian[4][16]={
					{0x00,0x40,0x42,0x44,0x58,0x40,0x40,0x7F,0x40,0x40,0x50,0x48,0xC6,0x00,0x00,0x00},
					{0x00,0x40,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,0xFF,0x00,0x00,0x00},/*"?",0*/

					{0x08,0x08,0xE8,0x29,0x2E,0x28,0xE8,0x08,0x08,0xC8,0x0C,0x0B,0xE8,0x08,0x08,0x00},
					{0x00,0x00,0xFF,0x09,0x49,0x89,0x7F,0x00,0x00,0x0F,0x40,0x80,0x7F,0x00,0x00,0x00},/*"?",1*/
};

char code number[10][16]={{0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00},/*"0",0*/
					{0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00},/*"1",1*/
					{0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00},/*"2",2*/
					{0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00},/*"3",3*/
					{0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00},/*"4",4*/
					{0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00},/*"5",5*/
					{0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00},/*"6",6*/
					{0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00},/*"7",7*/
					{0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00},/*"8",8*/
					{0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00},/*"9",9*/};

void wait(unsigned int count){
	while(count--){
		_nop_();
	}
}

void send2LED(char temp){
	for(d=0;d<8;d++){
		DCLK=0;
		LED=temp & 0x80;
		DCLK=1;
		temp<<=1;
	}
}

void outLed(int num){
	a=num/100;
	b=(num-a*100)/10;
	c=num-a*100-b*10;
	send2LED(ledCode[c]);
	send2LED(ledCode[b]);
	send2LED(ledCode[a]);
}


void checkReady(bit cs){
	CS1= cs==0 ? 1:0;
	CS2= cs==1 ? 1:0;
	P2=0xff;
	E=1;
	RS=0;
	RW=1;
	while(BUSY==1);
	E=0;
	CS2=0;
	CS1=0;
}
void write_command(bit cs,char com){
	checkReady(cs);
	CS1= cs==0 ? 1:0;
	CS2= cs==1 ? 1:0;
	RS=0;
	RW=0;
	E=1;
	P2=com;
	wait(20);
	E=0;
	CS1=0;
	CS2=0;
}
void cls(bit cs){
	for(i=0;i<8;i++){
		write_command(cs,0xb8+i);
		for(j=0;j<64;j++){
			checkReady(cs);
			CS1= cs==0 ? 1:0;
			CS2= cs==1 ? 1:0;
			E=1;
			RS=1;
			RW=0;
			P2=0x00;
			wait(20);
			E=0;
		}
	}
}
void write_bytes(bit cs,char * buffer,int len){
	for(i=0;i<len;i++){
		checkReady(cs);
		CS1= cs==0 ? 1:0;
		CS2= cs==1 ? 1:0;
		E=1;
		RS=1;
		RW=0;
		P2=*(buffer+i);
		wait(20);
		E=0;
	}
}
void outChina(bit cs,char x,char y,char china[][16]){
	write_command(cs,x+0xb8);
	write_command(cs,y+0x40);
	write_bytes(cs,*china,16);

	write_command(cs,x+1+0xb8);
	write_command(cs,y+0x40);
	write_bytes(cs,*(china+1),16);
}
void outNumber(bit cs,char x,char y,int num){
	write_command(cs,x+0xb8);
	write_command(cs,y+0x40);
	write_bytes(cs,number[num],8);
	write_command(cs,x+1+0xb8);
	write_command(cs,y+0x40);
	write_bytes(cs,number[num]+8,8);
}
void showNow(int num){
	a=num/100;
	b=(num-a*100)/10;
	c=num-a*100-b*10
	outNumber(1,4,12,c);
	outNumber(1,4,0,b);
	outNumber(0,4,52,a);
}
void showTarget(){
    int num;
    num = MINSPEED;
	a=num/100;
	b=(num-a*100)/10;
	c=num-a*100-b*10
	outNumber(0,4,32,c);
	outNumber(0,4,20,b);
	outNumber(0,4,8,a);

	num = MAXSPEED;
	a=num/100;
	b=(num-a*100)/10;
	c=num-a*100-b*10
	outNumber(1,4,48,c);
	outNumber(1,4,36,b);
	outNumber(1,4,24,a);
}
void initLCD(){
	cls(1);
	write_command(0,0x3f);
	cls(0);
	write_command(1,0x3f);

	outChina(0,1,16,dimubiao);
	outChina(0,1,48,dangqian);
	outChina(1,1,0,dangqian+2);
	outChina(1,1,32,gaodimubiao);
}
void ex_int0() interrupt 0
{
	count=count+1;
}
int getStepLen(int num){
	
	if(num<1){
		return 0;
	}
	if(num<10)
		return 1;
	temp=num/30+2;
	
	return temp;
}
void t0_int0() interrupt 1
{
	TR0=0;

	timer=timer-1;
	if(timer==0){                //半秒
		if(countS==0){
			countS=count;
			currentSpeed=count*2;
		}else{
			currentSpeed=count+countS;
			countS=0;
		}
		timer=TIMER;
		count=0;
		if(currentSpeed<objSpeed){
			N=N+getStepLen(objSpeed-currentSpeed);
		}
		if(currentSpeed>objSpeed){
			N=N-getStepLen(currentSpeed-objSpeed);
		}
	}

	TH0=0x3c;
	TL0=0xb0;
	TR0=1;
}
void t1_int0() interrupt 3
{
	TR1=0;

	SUM=SUM+N;
    if(!KEY1){
        objSpeed=MAXSPEED;
    }
    if(!KEY2){
        objSpeed=MINSPEED;
    }
    if(KEY1 && KEY2){
        objSpeed=MIDSPEED;
    }
    if(SUM>M){
        OUT=0;
        SUM=SUM-M;
    }else{
        OUT=1;
    }

	TH1=0xff;
	TL1=0x9c;
	TR1=1;
}
void initTimer(){
	P4SW=0x30;

	TMOD=0x11;   //中断方式 0，1,16位
	TH0=0x3c;    //50ms
	TL0=0xb0;

	TH1=0xff;    //0.1ms
	TL1=0x9c;

	IT0=1;  //外部中断0触发方式选择位。 下降沿触发方式。
	EA=1;
	ET0=1;
	ET1=1;
	//电机每转动一次，会产生一个脉冲，送到INT0
	EX0=1;

	TR0=1;   //允许计数
	TR1=1;
}
void waitL(int count){
	k=0xffff;
	while(count--){
		while(k--);
	}
}
void main(){
	initLCD();
	initTimer();
	while(1){
			outLed(currentSpeed);
			showTarget();
			showNow(currentSpeed);
		}
		waitL(0x05);
	}
}
