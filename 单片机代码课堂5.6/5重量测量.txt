#include<reg52.h>
#include<intrins.h>         // 声明了void _nop_(void)
#define LcdData P2            //LCD数据口（8线接法）
typedef unsigned int uint;
typedef unsigned char uchar;


//*************AD端口定义及相关函数声明**************
sfr PLASF = 0X9D;            //P1口模拟功能控制寄存器P1ASF
sfr ADC_CONTR = 0XBC;        //ADC控制寄存器
sfr ADC_RES = 0XBD;            //A/D转换结果寄存器高
sfr ADC_RESL = 0XBE;        //A/D转换结果寄存器低
sfr AUXR1 = 0XA2;
sfr IPH = 0XB7;                //中断优先级控制寄存器高
bit EADC = 0XA8^5;            //A/D转换中断允许位
#define ADC_POWER    0X80    //ADC电源控制位
#define ADC_FLAG    0X10    //模数转换器(ADC)转换启动控制位
#define ADC_START    0X08
#define ADC_SPEEDLL    0X00
#define ADC_SPEEDL    0X20    
#define ADC_SPEEDH    0X40
#define ADC_SPEEDHH    0X60

//AD函数声明
uint ADC_GET(uchar n);        //获得ADCData
void DelayMs(uint n);        //软件延迟n毫秒
void InitAD(uchar n);        //AD初始化
void DelayUs(uint cnt);        //延时cnt us（NOP）

//*********LCD端口定义及相关函数声明***************
sbit RST = P1^5;
sbit CS1 = P1^7;               //左半屏选择
sbit CS2 = P1^6;               //右半屏选择
sbit E = P3^3;                 //使能
sbit RW = P3^4 ;              //读/写选择器引脚(R/W)
sbit RS = P3^5;                //数据/命令选择器引脚(R/S)
sbit BUSY = P2^7;            //BUSY位
uchar mypage=2;                //汉字显示页设置
//C51并不支持位数组
//sbit DB[] = {P2^0, P2^1, P2^2, P2^3, P2^4, P2^5, P2^6, P2^7};
    
//LCD函数声明
void LcdCommandWrite(uchar value);    //写指令代码函数
void LcdDataWrite(uchar value);        //写显示数据函数
void LcdCommandRead(void);            //读状态字函数
//void LcdDataRead(void);            //读显示数据函数
//C51中没有布尔类型
void IsBusy(void);                    //读状态字时判断BUSY是否为1
void ShowOn(void);                    //显示开
void ShowOff(void);                    //显示关
void SetRow(uchar row);                //设置显示行
void SetCol(uchar col);                //设置显示列
void SetPage(uchar page);            //设置显示页
void ScreenChoose(uint screen);        //屏幕显示选择
void Clear(uint screen);            //清选定的屏
void DisplayWord(uint screen,uchar page,uchar col,uchar *word);            //显示汉字,按页显示
void DisplayChar(uint screen,uchar row,uchar col);                        //显示字符,按行显示
void Display(uint weight);            //重量显示
void Delay(uint cnt);                //延迟函数
void DisplayLine(void);                //显示一条直线
void InitLCD(void);                    //LCD初始化


//*********LCD字码***************
uchar code zhong[]={0x10,0x10,0x14,0xD4,0x54,0x54,0x54,0xFC,0x52,0x52,0x52,0xD3,0x12,0x10,0x10,0x00,0x40,0x40,0x50,0x57,0x55,0x55,0x55,0x7F,0x55,0x55,0x55,0x57,0x50,0x40,0x40,0x00};
uchar code liang[]={0x20,0x20,0x20,0xBE,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xBE,0x20,0x20,0x20,0x00,0x00,0x80,0x80,0xAF,0xAA,0xAA,0xAA,0xFF,0xAA,0xAA,0xAA,0xAF,0x80,0x80,0x00,0x00};
uchar code wei[]={0x00,0x20,0x22,0x2C,0x20,0x20,0xE0,0x3F,0x20,0x20,0x20,0x20,0xE0,0x00,0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x06,0x01,0x00,0x01,0x46,0x80,0x40,0x3F,0x00,0x00,0x00};
uchar code maohao[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code ling[]={0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code yi[]={0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code er[]={0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code san[]={0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code si[]={0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code wu[]={0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code liu[]={0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code qi[]={0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code ba[]={0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code jiu[]={0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
uchar code ke[]={0x04,0x04,0xE4,0x24,0x24,0x24,0x24,0x3F,0x24,0x24,0x24,0x24,0xE4,0x04,0x04,0x00,0x80,0x80,0x43,0x22,0x12,0x0E,0x02,0x02,0x02,0x7E,0x82,0x82,0x83,0x80,0xE0,0x00};


//*********main函数***************
void main()
{
    InitAD(0);
    InitLCD();
    DisplayLine();
    while(1)
    {
        uint ad = 0;
        ad = ADC_GET(0);
        Display(ad);
    }
}

//*********AD函数定义***************
void InitAD(uchar n)
{ 
 
    PLASF = 0xff;  
    ADC_RES = 0;
    ADC_CONTR = ADC_POWER | ADC_SPEEDLL;
    DelayMs(2);    


    n &= 0x07;        
    AUXR1 |= 0x04;       
    PLASF = 1<<n;        

    PLASF = 0X01;   
    ADC_CONTR = 0X10;
    EA = 1;
    ADC_RES = 0X00;
    ADC_RESL = 0X00;
    EADC = 1;                                       //AD中断开

}
uint ADC_GET(uchar n)
{
    
    uint ADCData;
    n &= 0x07;            
    ADC_RES = 0;        
    ADC_RESL = 0;        
    ADC_CONTR = 0;                                //ADC_CONTR置0
    ADC_CONTR |= (ADC_POWER|ADC_SPEEDLL|n|ADC_START);
    DelayUs(6);                                    //延迟6个nop，书上4个nop,不够
    while(!((ADC_CONTR & ADC_FLAG) == 0x10))       
    ADCData = (ADC_RES&0x03)*256 + ADC_RESL;      //取十位结果
    return ADCData-(636+99);                      //返回ADCData
}


void DelayMs(uint n)
{
    uint x;
    while(n--)
    {
        x = 5000;
        while(x--);
    }
}

//*********LCD函数定义***************
void InitLCD(void)
{ 
    IsBusy();
    RST=1;
    RST=0;                                //复位
    Delay(100);
    RST=1;
    ShowOff();
    Delay(100);
    ShowOn();
    Clear(0);
    //设置起始位置(0,0)
    SetPage(0);
    SetRow(0);                    
    SetCol(0);    
}
void ScreenChoose(uint screen){
    switch(screen)
    {
        case 0: CS1=1;CS2=1;break;         //全屏
        case 1: CS1=1;CS2=0;break;         //左屏
        case 2: CS1=0;CS2=1;break;         //右屏
        default: CS1=1;CS2=1;break;        //全屏
    }
}

void LcdCommandWrite(uchar value)        //写指令代码函数
{    
    IsBusy();
    // 定义相关引脚
    //CS1=1;
    //CS2=1;
    RS=0;
    RW=0;
    LcdData=value;
    //一个下跳沿
    E=1;
    Delay(200);
    E=0;
}
void LcdDataWrite(uchar value)            //写显示数据函数
{
    IsBusy();
    //CS1=1;
    //CS2=1;
    RS=1;
    RW=0;
    LcdData=value;
    E=1;
    Delay(200);
    E=0;
}
    void LcdCommandRead(void)            //读状态字函数
    {    
    RS=0;
    RW=1;
    E=1;
}
/*
void LcdDataRead(void)                    //读显示数据函数
{
    RS=1;
    RW=1;
    E=1;
}
*/
void IsBusy(void)                       //判断BUSY是否为1
{
    LcdCommandRead();
    while(BUSY);
    E=0;                                //控制LCM读取结束        
}
void DelayUs(uint cnt)
{
    uint temp=0;
    for(temp=0;temp<cnt;temp++)
    /*
    *对于延时很短的，要求在us级的，采用“_nop_”函数，这个函数相当汇编NOP指令，延时几微秒。
    *NOP指令为单周期指令，可由晶振频率算出延时时间，对于12M晶振，延时1uS。
    */
        _nop_();
}
void Delay(uint cnt)
{
    while(--cnt);
}
void ShowOn(void)                        //显示开
{
    LcdCommandWrite(0x3f);    
}
void ShowOff(void)                        //显示关
{
    LcdCommandWrite(0x3e);    
}
void SetRow(uchar row)                    //设置显示行
{
    row=row&0x3f;                        //Row范围0到63,高两位清零
    LcdCommandWrite(0xc0+row);
}
void SetCol(uchar col)                    //设置显示列
{
    col=col&0x3f;                        //Col范围0到63,高两位清零
    LcdCommandWrite(0x40+col);
}
void SetPage(uchar page)                //设置显示页
{
    page=page&0x07;                        //Page范围0到7,取低三位
    LcdCommandWrite(0xb8+page);
}
void Clear(uint screen){
    uint i,j;
    ScreenChoose(screen);
    for(i=0;i<8;i++){
        SetPage(i);
        SetCol(0x00);
        for(j=0;j<64;j++){
            LcdDataWrite(0x00);
        }
    }
}
void DisplayWord(uint screen,uchar page,uchar col,uchar *word)                    //显示汉字,按页显示
{
    uint i=0;
    //显示汉字，16*16，需要两页
    ScreenChoose(screen);
    SetPage(page);                         //选上半字
    SetCol(col);                         //选定列数
    for(i=0;i<16;i++){                     //上半个字s
        LcdDataWrite(word[i]);
    }
    SetPage(page+1);                       //选下半字
    SetCol(col);                         //选定列数
    for(i=0;i<16;i++){                     //下半个字
        LcdDataWrite(word[i+16]);
    }
}

void DisplayChar(uint screen,uchar row,uchar col)                                //显示字符,按行显示
{
    ScreenChoose(screen);
    SetRow(row);                         //选定行数
    SetCol(col);                         //选定列数
    LcdDataWrite(0x01);
}


void Display(uint weight){

    uchar a,b,c;
    DisplayWord(1,mypage,0*16,zhong);        //重
    DisplayWord(1,mypage,1*16,liang);        //量
    DisplayWord(1,mypage,2*16,wei);            //为
    DisplayWord(1,mypage,3*16,maohao);      //:
    a = weight/100;
    b = weight%100/10;
    c = weight%10;
    switch(a){
        case 0: DisplayWord(2,mypage,0*16,ling);break;
        case 1: DisplayWord(2,mypage,0*16,yi);break;
        case 2: DisplayWord(2,mypage,0*16,er);break;
        case 3: DisplayWord(2,mypage,0*16,san);break;
        case 4: DisplayWord(2,mypage,0*16,si);break;
        case 5: DisplayWord(2,mypage,0*16,wu);break;
        case 6: DisplayWord(2,mypage,0*16,liu);break;
        case 7: DisplayWord(2,mypage,0*16,qi);break;
        case 8: DisplayWord(2,mypage,0*16,ba);break;
        case 9: DisplayWord(2,mypage,0*16,jiu);break;
    }
    switch(b){
        case 0: DisplayWord(2,mypage,1*16,ling);break;
        case 1: DisplayWord(2,mypage,1*16,yi);break;
        case 2: DisplayWord(2,mypage,1*16,er);break;
        case 3: DisplayWord(2,mypage,1*16,san);break;
        case 4: DisplayWord(2,mypage,1*16,si);break;
        case 5: DisplayWord(2,mypage,1*16,wu);break;
        case 6: DisplayWord(2,mypage,1*16,liu);break;
        case 7: DisplayWord(2,mypage,1*16,qi);break;
        case 8: DisplayWord(2,mypage,1*16,ba);break;
        case 9: DisplayWord(2,mypage,1*16,jiu);break;
    }
    switch(c){
        case 0: DisplayWord(2,mypage,2*16,ling);break;
        case 1: DisplayWord(2,mypage,2*16,yi);break;
        case 2: DisplayWord(2,mypage,2*16,er);break;
        case 3: DisplayWord(2,mypage,2*16,san);break;
        case 4: DisplayWord(2,mypage,2*16,si);break;
        case 5: DisplayWord(2,mypage,2*16,wu);break;
        case 6: DisplayWord(2,mypage,2*16,liu);break;
        case 7: DisplayWord(2,mypage,2*16,qi);break;
        case 8: DisplayWord(2,mypage,2*16,ba);break;
        case 9: DisplayWord(2,mypage,2*16,jiu);break;
    }
    DisplayWord(2,mypage,3*16,ke);
    Delay(5000);
}
void DisplayLine(void)                    //显示一条直线
{
    DisplayChar(1,50,0);
    DisplayChar(1,50,1);
    DisplayChar(1,50,2);
    DisplayChar(1,50,3);
    
    DisplayChar(1,50,8);
    DisplayChar(1,50,9);
    DisplayChar(1,50,10);
    DisplayChar(1,50,11);
    
    DisplayChar(1,50,16);
    DisplayChar(1,50,17);
    DisplayChar(1,50,18);
    DisplayChar(1,50,19);
    
    DisplayChar(1,50,24);
    DisplayChar(1,50,25);
    DisplayChar(1,50,26);
    DisplayChar(1,50,27);
    
    DisplayChar(1,50,32);
    DisplayChar(1,50,33);
    DisplayChar(1,50,34);
    DisplayChar(1,50,35);
    
    DisplayChar(1,50,40);
    DisplayChar(1,50,41);
    DisplayChar(1,50,42);
    DisplayChar(1,50,43);
    
    DisplayChar(1,50,48);
    DisplayChar(1,50,49);
    DisplayChar(1,50,50);
    DisplayChar(1,50,51);
    
    DisplayChar(1,50,56);
    DisplayChar(1,50,57);
    DisplayChar(1,50,58);
    DisplayChar(1,50,59);
    
    DisplayChar(2,50,0);
    DisplayChar(2,50,1);
    DisplayChar(2,50,2);
    DisplayChar(2,50,3);
    
    DisplayChar(2,50,8);
    DisplayChar(2,50,9);
    DisplayChar(2,50,10);
    DisplayChar(2,50,11);
    
    DisplayChar(2,50,16);
    DisplayChar(2,50,17);
    DisplayChar(2,50,18);
    DisplayChar(2,50,19);
    
    DisplayChar(2,50,24);
    DisplayChar(2,50,25);
    DisplayChar(2,50,26);
    DisplayChar(2,50,27);
    
    DisplayChar(2,50,32);
    DisplayChar(2,50,33);
    DisplayChar(2,50,34);
    DisplayChar(2,50,35);
    
    DisplayChar(2,50,40);
    DisplayChar(2,50,41);
    DisplayChar(2,50,42);
    DisplayChar(2,50,43);
    
    DisplayChar(2,50,48);
    DisplayChar(2,50,49);
    DisplayChar(2,50,50);
    DisplayChar(2,50,51);
    
    DisplayChar(2,50,56);
    DisplayChar(2,50,57);
    DisplayChar(2,50,58);
    DisplayChar(2,50,59);
}